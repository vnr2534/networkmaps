this.diagram = {
	version: 1,
	settings: {
        id_gen: 1000,
        bg_color: 0xf0f0f0,
        shapes: ["1", "2"],
	},
	l2: {
		base: {
			0: {
						type: "F",
						subtype: "g"     -> can be g: ground, f: floating, p: platform
						name: "Floor"
						px: 0, py: 0, pz: 0, 
						rx: 0, ry: 0, rz: 0,
						sx: 20, sy: .5, sz: 20,
						color: 0xffffff,
						t1name: "b1_t1",
						t2name: "b2_t1",
						tsx: 1,
						tsy: 1,
						infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
						data: [],									-> see at the end format of data
			},
		},
		text: {
			0: {
				type: "F",										    -> F: Floor
				text: "Hola.\n\nesto es un texto.",

				base: 0,											-> Base element used to calculate position				
				px: 0, py: 0, pz: 0, 
				rx: 0, ry: 0,
				height: .3,

				color: 0xffffff,

		        text_align: "l",
		        rotation_x: 0,
		        bg_color: 0xffffff,
		        border_color: 0x000000,
		        bg_type: "n",
		        bg_show: false,
		        border_show: false,
		        border_width: .1,
		        bg_depth: .1,
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
		symbol: {
			0: {
				type: "F",										-> F: Flag, V: right, X: wrong, A: arrow

				base: 0,											-> Base element used to calculate position				
				px: 0, py: 0, pz: 0, 
				rx: 0, ry: 0, rz: 0,
				sx: 1, sy: 1, sz: 1,
				color: 0xff0000,

				cd: {											-> data specific to the type
					// Flag specific
					flagcolor: 0x00ff00,

					// Arrow specific
					shaft_dots: 1,
					head_color: 0xffffff,						-> Color of the arror
					head_type: 									-> Type of head: "n": none, "f": flat, "v": v shaped, "p": pyramid, "r": round, "s": squared
					tail_type:									-> Type of tail: same as head
					shaft_type:									-> "s": squared, "r": round
					head_sx_per, head_sy_per, head_sz_per,		-> size of head/tail relative to size of arrow
					tail_sx_per, tail_sy_per, tail_sz_per,		-> size of head/tail relative to size of arrow

				}
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
		device: {
			0: {
				name: "a dev name",
				type: "R",		                                 	-> Multiple options
				ifnaming: [
					"Ethernet{1-40}/{1-4}",
					"Ethernet{41-44}"
				],
				base: 0,											-> Base element used to calculate position
				px: 0, py: 0, pz: 0,
				sx: 1, sy: 1, sz: 1,
				rx: 0, ry: 0, rz: 0,
				color1: 0xffffff,
				color2: 0xffffff,
				vlans: {
					"5": {name: "VLAN5"},
					"6": {name: "DMZ"},
				},
				vrfs: {
					"65000:1" : {
							name: "default",
					"65000:2" : {
							name: "aditional_vrf",
					}
				},
				svis: {
					5: {
						name: "vlan5",
						vrf: "<vrf rd>"
					}
				},
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
		link: {
			0: {
				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				phy: {
					"ifbindings": [									-> if more than one, then it's considered a lag
						["Ethernet1", "Ethernet2"],
						["Ethernet3", "Ethernet8/1"]
					],
					"lag_name": ["Po0", "Po0"],
					"lacp": true,
					"transceiver": "10BASET"
				}
				devs: [
					{
						id: 0,
						data: { ... }								-> See at the end options for interface data
					},
					{
						id: 1,
						data: { ... }
					},
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
	},

	l3: {
		base: {
			# Same as l2
		}

		l2segment: {
			0: {
				l2_reference: {
					device_id: device_id,
					vlan_id: vlan_id
				}
				base: 0,											-> Base element used to calculate position
				type: "VLAN",										-> For now, only type vlan will exist. determines the shape of this element
				name: "A name",
				px: 0, py: 0, pz: 0,
				sx: 1, sy: 1, sz: 1,
				rx: 0, ry: 0, rz: 0,
				color1: 0xffffff,
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		}
		l2link: {
			0: {
				l2_reference: {
					link_id:
				}
				l3_reference: {
					src_l2segment_id: 0,
					dst_l2segment_id: 1,
				}
				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		}
		vrf: {
			0: {
				l2_reference: {
					device_id: device_id,
					vrf_id: vrf_id
				}
				base: 0,											-> Base element used to calculate position
				type: "R",
				name: "",
				px: 0, py: 0, pz: 0,
				sx: 1, sy: 1, sz: 1,
				rx: 0, ry: 0, rz: 0,
				color1: 0xffffff,
				color2: 0xffffff,
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				routing: {
					router_id: 1.1.1.1,
					asn: "",
				}
				los: {												-> Loopbacks
					"lo1": {
						ipv4: [],
						ipv6: [],
					}
				},
				data: [],									-> see at the end format of data
			}
		},
		bgp_peering: {
			0: {
				curve_x, curve_y,
				color: 0xff0000
				l3_reference: {
					src_vrf_id:
					dst_vrf_id:
				}
				transport: options are ipv4 or ipv6
				afisafi: ["ipv4/unicast", "ipv6/unicast"]					
					-> Options: 
						"ipv4/unicast", "ipv4/multicast", "ipv4/l3vpn", "ipv4/l3vpn-multicast", "ipv4/labeled"
						"ipv6/unicast", "ipv6/multicast", "ipv6/l3vpn", "ipv6/l3vpn-multicast", "ipv6/labeled"
						"l2vpn/vpls",
						"evpn"
				src_ip:
				dst_ip:
			}
		},
		p2p_interface: {
			0: {
				l2_reference: {
					link_id: link_id,
					vlan_tag: vlan_tag,
				}

				l3_reference: {
					src_vrf_id: 0,
					dst_vrf_id: 1,
				}

				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				},
				
				ip: [  												-> List, one entry per device of the p2p interface
					{
						address: {
							ipv4: [],
							ipv6: [],
						}
					},
					{
						address: {
							ipv4: [],
							ipv6: [],
						}					
					}
				]
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		}
		interface: {
			0: {
				l2_reference: {
					link_id:
					vlan_tag:
				}

				l3_reference: {
					vrf_id: 0,
					l2segment_id: 1,
				}

				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				},
				ip: {
				 	address: {
						ipv4: [],
						ipv6: [],
					}
				}
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
		svi_interface: {
			0: {
				l2_reference: {
					device_id: device_id,
					svi_id:
				}

				l3_reference: {
					vrf_id: 0,
					l2segment_id: 1,
				}

				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
				ip: {
				 	address: {
						ipv4: [],
						ipv6: [],
					}
				}
				infobox_type: "l", 							-> "l": show l2/l3 info, "d": show data
				data: [],									-> see at the end format of data
			}
		},
		symbol: {} -> Same as L2
		text: {} -> same as L2
	}
}




PHYSICAL INTERFACES DATA OPTIONS
	SWITCHING INTERFACE
						function: "switching"
						function_data: {
							vlans: [1,2,3, ...]
							native_vlan: 3					-> -1 if no native vlan
						}
	ROUTING INTERFACE
						function: "routing"
						function_data: {
							subinterfaces: [
								0: {
									vlan_tag: -1, (native)
									vrf: "65001:1"					-> this is the rd
								}
								1: {
									vlan_tag: 2,
									vrf: "1"
								}
							]
						}
	UNCONFIGURED INTERFACE
						function: "none",
						function_data: {}


ELEMENT DATA ENTRY FORMAT:
	{
		title: "this is the title",					-> single line
		text: [										->
			"text line 1",
			"text line 2",
		]
	}